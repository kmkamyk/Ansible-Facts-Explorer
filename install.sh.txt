#!/bin/bash
set -euo pipefail

# ==============================================================================
# Ansible Facts Explorer (AFE) Installation Script v3.1 for RHEL-based Systems
# ==============================================================================
# This script automates the deployment of the AFE application, including:
# - A dedicated PostgreSQL database with a pre-defined password.
# - The Node.js API backend as a systemd service with static configuration.
# - An Nginx reverse proxy configured for HTTPS with self-signed certificates.
# - Automatic generation of SSL certificates for secure communication.
# - Full uninstall capability for clean removal.
#
# See README.md for detailed usage instructions.
# ==============================================================================

# --- Configuration Variables ---
# --- !!! IMPORTANT !!! ---
# --- Review and update these values before running the script. ---
PGPASSWORD="afe_strong_password_123!" # CHANGE THIS for a secure production deployment
AWX_URL="https://awx.example.com"
AWX_TOKEN="YOUR_SECRET_AWX_TOKEN"
# --- End of user configuration ---

FRONTEND_DIR="/app/afe"
BACKEND_DIR="/data/afe-api"
PGDATA="/var/lib/pgsql/15/data" # Default for RHEL/PostgreSQL 15 module
PGUSER="afeuser"
PGDB="afedb"
SERVICE_FILE="/etc/systemd/system/afe-api.service"
NGINX_CONF="/etc/nginx/conf.d/afe.conf"
SSL_KEY="/etc/ssl/private/afe.key"
SSL_CERT="/etc/ssl/certs/afe.crt"

# --- Helper Functions for Logging ---
log_info() {
  echo -e "\033[0;32m[INFO]\033[0m $1"
}

log_warn() {
  echo -e "\033[0;33m[WARN]\033[0m $1" >&2
}

log_error() {
  echo -e "\033[0;31m[ERROR]\033[0m $1" >&2
}

# --- Pre-flight Checks ---
function run_checks() {
    log_info "Running pre-flight checks..."
    local dependencies=("dnf" "systemctl" "npm" "node" "rsync" "sudo" "ss" "sestatus" "chcon" "openssl" "setsebool")
    local missing_deps=0
    for cmd in "${dependencies[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log_error "Dependency missing: '$cmd'. Please install it and try again."
            missing_deps=1
        fi
    done
    if [[ $missing_deps -eq 1 ]]; then
        exit 1
    fi
    log_info "All dependencies are present."
}

# --- Installation Functions ---
function generate_ssl_certs() {
  log_info "Checking for SSL certificates..."
  if [[ -f "$SSL_KEY" && -f "$SSL_CERT" ]]; then
    log_info "SSL certificates already exist. Skipping generation."
  else
    log_warn "SSL certificates not found. Generating self-signed certificates for Nginx..."
    mkdir -p /etc/ssl/certs /etc/ssl/private
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout "$SSL_KEY" \
      -out "$SSL_CERT" \
      -subj "/CN=localhost"
    log_info "Self-signed certificates generated."
  fi
}

function deploy_frontend() {
  log_info "Deploying AFE frontend..."

  if [[ ! -d "dist" ]]; then
     log_error "Frontend build directory 'dist' not found. Please build the frontend first:"
     log_error "  npm install && npm run build"
     exit 1
  fi
  
  log_info "Syncing built files from 'dist/' to $FRONTEND_DIR..."
  rsync -a --delete dist/ "$FRONTEND_DIR/"
  chown -R nginx:nginx "$FRONTEND_DIR"

  if sestatus | grep -q "Current mode:.*enforcing"; then
    log_info "SELinux is enforcing. Re-applying 'httpd_sys_content_t' context to new frontend files..."
    chcon -R -t httpd_sys_content_t "$FRONTEND_DIR" || log_warn "Failed to set SELinux context."
  fi

  if systemctl is-active --quiet nginx; then
    log_info "Reloading Nginx to apply changes..."
    nginx -t && systemctl reload nginx
  fi

  log_info "Frontend deployed successfully to $FRONTEND_DIR"
}

function deploy_backend() {
  log_info "Deploying AFE backend..."
  
  if ! id "afeapi" &>/dev/null; then
    log_info "Creating system user 'afeapi'..."
    useradd -r -s /usr/sbin/nologin afeapi
  fi

  log_info "Syncing backend files to $BACKEND_DIR..."
  if [[ ! -d "fact-api-backend" ]]; then
      log_error "Backend directory 'fact-api-backend' not found. Please ensure it exists."
      exit 1
  fi
  mkdir -p "$BACKEND_DIR"
  rsync -a --delete fact-api-backend/ "$BACKEND_DIR/"
  chown -R afeapi:afeapi "$BACKEND_DIR"

  log_info "Installing backend dependencies as user 'afeapi'..."
  sudo -u afeapi npm install --prefix "$BACKEND_DIR" --cache "$BACKEND_DIR/.npm-cache" --no-audit --omit=dev

  log_info "Creating backend configuration file at $BACKEND_DIR/config.js..."
  # This overwrites the development config.js that was copied.
  # The backend is configured for HTTP as it sits behind an HTTPS Nginx proxy.
  tee "$BACKEND_DIR/config.js" >/dev/null <<EOF
// config.js - This file is auto-generated by the install.sh script.
// It contains the production configuration for the AFE backend.

module.exports = {
  dbConfig: {
    host: 'localhost',
    port: 5432,
    user: '$PGUSER',
    password: '$PGPASSWORD',
    database: '$PGDB',
  },
  awxConfig: {
    url: '$AWX_URL',
    token: '$AWX_TOKEN',
    concurrencyLimit: 20,
    requestTimeout: 30000,
  },
  sslConfig: {
    keyPath: '',
    certPath: '',
    caPath: '',
  },
};
EOF
  chown afeapi:afeapi "$BACKEND_DIR/config.js"
  chmod 640 "$BACKEND_DIR/config.js"

  log_info "Creating systemd service file at $SERVICE_FILE..."
  tee "$SERVICE_FILE" >/dev/null <<EOF
[Unit]
Description=AFE API backend (Node.js)
Documentation=https://github.com/kmkamyk/ansible-facts-explorer
After=network.target postgresql.service

[Service]
Type=simple
User=afeapi
Group=afeapi
WorkingDirectory=$BACKEND_DIR
# Allows connecting to AWX with self-signed certificates.
Environment="NODE_TLS_REJECT_UNAUTHORIZED=0"
# Configuration is loaded from $BACKEND_DIR/config.js by the application
ExecStart=/usr/bin/node $BACKEND_DIR/server.js
Restart=on-failure
RestartSec=10
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

  log_info "Reloading systemd, enabling and starting afe-api.service..."
  systemctl daemon-reload
  systemctl enable --now afe-api.service
  
  sleep 2
  systemctl status afe-api.service --no-pager

  log_info "Backend deployed to $BACKEND_DIR and running on port 4000 (HTTP)."
}

function install_postgres() {
  log_info "Installing and configuring PostgreSQL..."
  
  log_info "Installing PostgreSQL 15..."
  dnf -y module enable postgresql:15
  dnf install -y postgresql-server postgresql

  if [ ! -d "$PGDATA/base" ]; then
    log_info "Initializing PostgreSQL database at $PGDATA..."
    /usr/bin/postgresql-setup --initdb
  else
    log_warn "PostgreSQL data directory already exists. Skipping initialization."
  fi
  
  log_info "Enabling and starting the postgresql service..."
  systemctl enable --now postgresql

  log_info "Configuring database '$PGDB' and user '$PGUSER'..."
  sudo -i -u postgres -- psql -c "SELECT 1 FROM pg_roles WHERE rolname='$PGUSER'" | grep -q 1 || sudo -i -u postgres -- psql -c "CREATE ROLE $PGUSER WITH LOGIN PASSWORD '$PGPASSWORD';"
  sudo -i -u postgres -- psql -lqt | cut -d \| -f 1 | grep -qw "$PGDB" || sudo -i -u postgres -- psql -c "CREATE DATABASE $PGDB OWNER $PGUSER;"
  
  sudo -i -u postgres -- psql -d "$PGDB" -c "GRANT ALL PRIVILEGES ON DATABASE $PGDB TO $PGUSER;"

  log_info "Creating the 'facts' table if it doesn't exist..."
  sudo -i -u postgres -- psql -d "$PGDB" <<SQL
CREATE TABLE IF NOT EXISTS facts (
    id SERIAL PRIMARY KEY,
    hostname VARCHAR(255) UNIQUE NOT NULL,
    data JSONB NOT NULL,
    modified_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE facts OWNER TO $PGUSER;
SQL

  log_info "PostgreSQL installed and configured successfully."
}

function configure_nginx() {
  log_info "Installing and configuring Nginx for HTTPS..."

  dnf install -y nginx
  systemctl enable --now nginx

  if [[ -f /etc/nginx/conf.d/default.conf ]]; then
    log_warn "Found default Nginx configuration in conf.d. Renaming to 'default.conf.bak'."
    mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
  fi

  if [[ -f /etc/nginx/nginx.conf.bak ]]; then
    log_info "Restoring main Nginx configuration from backup to undo previous changes."
    mv /etc/nginx/nginx.conf.bak /etc/nginx/nginx.conf
  fi

  log_info "Ensuring frontend directory exists at $FRONTEND_DIR..."
  mkdir -p "$FRONTEND_DIR"
  chown nginx:nginx "$FRONTEND_DIR"

  log_info "Setting correct traversal permissions and SELinux context..."
  chmod 755 /app
  if sestatus | grep -q "Current mode:.*enforcing"; then
    chcon -R -t httpd_sys_content_t "$FRONTEND_DIR" || log_warn "Failed to set SELinux context."
    log_info "SELinux is enforcing. Allowing Nginx to make network connections for proxying..."
    setsebool -P httpd_can_network_connect 1 || log_warn "Failed to set SELinux boolean 'httpd_can_network_connect'. Proxying to backend may fail."
  fi

  log_info "Creating Nginx configuration at $NGINX_CONF for HTTPS..."
  tee "$NGINX_CONF" >/dev/null <<EOF
# Redirect all HTTP traffic to HTTPS
server {
    listen 80 default_server;
    server_name _;
    return 301 https://\$host\$request_uri;
}

# Main HTTPS server block
server {
    listen 443 ssl http2 default_server;
    server_name _;

    # SSL Configuration (uses self-signed certs generated by this script)
    ssl_certificate $SSL_CERT;
    ssl_certificate_key $SSL_KEY;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    root $FRONTEND_DIR;
    index index.html;

    location / {
        try_files \$uri \$uri/ /index.html;
    }

    # Proxy API requests to the HTTP backend Node.js server
    location /api/ {
        proxy_pass http://127.0.0.1:4000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
  
  if systemctl is-active --quiet firewalld; then
    log_info "Firewalld is active. Adding rules for HTTP and HTTPS services..."
    firewall-cmd --permanent --add-service=http
    firewall-cmd --permanent --add-service=https
    firewall-cmd --reload
  fi

  log_info "Testing and reloading Nginx configuration..."
  nginx -t && systemctl reload nginx
  log_info "Nginx configured for HTTPS on port 443."
}

function uninstall_app() {
    log_warn "This will permanently delete the AFE application and its data."
    read -p "Are you sure you want to continue? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Uninstall cancelled."
        exit 0
    fi

    log_info "Stopping and disabling services..."
    systemctl stop afe-api.service nginx || log_warn "Could not stop afe-api or nginx services (they may not be running)."
    systemctl disable afe-api.service || log_warn "Could not disable afe-api.service."

    if systemctl is-active --quiet firewalld; then
        log_info "Removing firewall rules for HTTP and HTTPS..."
        firewall-cmd --permanent --remove-service=http >/dev/null 2>&1 || true
        firewall-cmd --permanent --remove-service=https >/dev/null 2>&1 || true
        firewall-cmd --reload
    fi

    log_info "Removing application files and directories..."
    rm -f "$SERVICE_FILE" "$NGINX_CONF" "$SSL_KEY" "$SSL_CERT"
    rm -rf "$FRONTEND_DIR" "$BACKEND_DIR"
    
    if [[ -f /etc/nginx/conf.d/default.conf.bak ]]; then
      log_info "Restoring default Nginx conf.d configuration..."
      mv /etc/nginx/conf.d/default.conf.bak /etc/nginx/conf.d/default.conf
    fi
    if [[ -f /etc/nginx/nginx.conf.bak ]]; then
      log_info "Restoring main Nginx configuration..."
      mv /etc/nginx/nginx.conf.bak /etc/nginx/nginx.conf
    fi

    log_info "Removing system user 'afeapi'..."
    if id "afeapi" &>/dev/null; then
        userdel afeapi
        log_info "User 'afeapi' removed."
    else
        log_warn "User 'afeapi' not found."
    fi

    log_info "Reloading systemd daemon and nginx..."
    systemctl daemon-reload
    nginx -t && systemctl reload nginx || log_warn "Nginx could not be reloaded. A restart may be required."

    read -p "Do you also want to remove the PostgreSQL user and database? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Dropping database '$PGDB' and user '$PGUSER'..."
        if systemctl is-active --quiet postgresql; then
            sudo -i -u postgres -- psql -c "DROP DATABASE IF EXISTS $PGDB;" || log_warn "Failed to drop database '$PGDB'."
            sudo -i -u postgres -- psql -c "DROP ROLE IF EXISTS $PGUSER;" || log_warn "Failed to drop role '$PGUSER'."
        else
            log_warn "PostgreSQL is not running. Cannot drop database and user automatically."
        fi
    else
        log_warn "PostgreSQL database and user were not removed."
    fi

    read -p "Do you want to COMPLETELY UNINSTALL PostgreSQL and DELETE all its data? This cannot be undone. [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_warn "Proceeding with complete PostgreSQL removal..."
        log_info "Stopping and disabling PostgreSQL..."
        systemctl stop postgresql || log_warn "PostgreSQL was not running."
        systemctl disable postgresql || log_warn "Could not disable PostgreSQL."
        log_info "Removing PostgreSQL packages..."
        dnf remove -y 'postgresql*' > /dev/null
        log_info "Deleting PostgreSQL data directory /var/lib/pgsql..."
        rm -rf /var/lib/pgsql
        log_warn "PostgreSQL and all its data have been removed."
    else
        log_warn "PostgreSQL package was not removed."
    fi

    log_info "Uninstall complete."
}

function show_status() {
    log_info "Checking status of AFE services..."
    echo "--- Nginx Status ---"
    systemctl status nginx --no-pager
    echo
    echo "--- AFE API Backend Status ---"
    systemctl status afe-api.service --no-pager
    echo
    log_info "To check PostgreSQL, run: sudo systemctl status postgresql"
}

### MAIN SCRIPT LOGIC ###
if [[ $EUID -ne 0 ]]; then
   log_error "This script must be run as root (or with sudo)." 
   exit 1
fi

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 [frontend|postgres|nginx|all|uninstall|status]"
  echo "  all:       Installs postgres, generates certs, configures nginx & backend, and deploys the frontend."
  echo "  frontend:  Deploys the pre-built React frontend from the 'dist' directory."
  echo "  postgres:  Installs and-configures PostgreSQL."
  echo "  nginx:     Installs and configures Nginx for HTTPS."
  echo "  uninstall: Removes all AFE components from the system."
  echo "  status:    Checks the status of AFE services."
  exit 1
fi

run_checks

case "$1" in
  all)
    log_info "Running 'all' tasks: postgres, certs, nginx, backend, and frontend..."
    install_postgres
    generate_ssl_certs
    configure_nginx
    deploy_backend

    log_info "Building frontend application..."
    if ! (npm install && npm run build); then
        log_error "Frontend build failed. Please check for errors in the output above."
        log_error "You may need to resolve frontend issues and then run 'sudo $0 frontend' manually."
        exit 1
    fi
    log_info "Frontend build successful. Deploying..."
    deploy_frontend
    
    echo -e "\n\033[1;32m========================= INSTALLATION COMPLETE ========================="
    log_info "All services deployed successfully."
    log_info "App URL:              https://<your_server_ip>"
    log_info "Database User:        $PGUSER"
    log_warn "Database Password is set in the script. Remember to secure it."
    log_warn "AWX config is set in the script. Update token as needed."
    log_info "Frontend Location:    $FRONTEND_DIR"
    log_info "Backend Location:     $BACKEND_DIR/config.js is the config file."
    log_info "You can now access the application at the URL above."
    echo -e "\033[1;32m======================================================================\033[0m"
    ;;
  frontend)
    deploy_frontend
    ;;
  postgres)
    install_postgres
    ;;
  nginx)
    generate_ssl_certs # Nginx needs certs to start correctly
    configure_nginx
    ;;
  uninstall)
    uninstall_app
    ;;
  status)
    show_status
    ;;
  *)
    log_error "Invalid option: $1"
    echo "Usage: $0 [frontend|postgres|nginx|all|uninstall|status]"
    exit 1
    ;;
esac

log_info "Script finished."
